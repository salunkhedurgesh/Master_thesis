% function name: objective_function_live()
% Description: The calculation of the evaluation of the feasible workspace
% Inputs:
% 1. type of the mechanism
% 2. parameters (A (1xn) vector)
% 3. limit for the joints
% Outpus:
% 1. evaluation of the objective function for given set of parameters
% 2. optimised actuator range

function [c_qual,rho_vec] = objective_function_live(type, parameters, limits, reward, maximize)

valid_iter = 1;
skip = 0;
invalid_points = 0;
[rho1_range,rho2_range] = rho_range_func(type, parameters);
rho_min = max(rho1_range(1), rho2_range(1))
c_qual_only_joint = 0;
rho_vec = zeros(1, 2);
for alpha = -1 : 0.01 :1
    for beta = -1 :0.01 :1
        [det_val, p_lim_uni, p_lim_sph1, p_lim_sph2, rho_inst, collision_dist, quality_indices] = constraints(type, parameters, limits, alpha, beta, rho_min);
        %Singularity check
        if abs(det_val) < 0.005
            skip = 1;
            invalid_points = invalid_points + 1;
        end
        
        % Collision check
        if collision_dist < min(rho1_range(2), rho2_range(2))/8
            skip = 1;
            invalid_points = invalid_points + 1;
        end
        
        % conditioning number
        det_qual = 5 * quality_indices(1);
        if abs(alpha) <= 0.8 && abs(beta) <= 0.8
            %             if quality_indices(2) < limits(4) || quality_indices(3) > 1/limits(4)
            %                 skip = 1;
            %             end
            if maximize == "bias_conditioning"
                det_qual = 2 * det_qual;
            elseif maximize == "inner_conditioning"
                if quality_indices(1) < 0.3
                    invalid_points = invalid_points + 1;
                    continue
                end
            end
        end
        
        if skip == 1
            continue
        end
        if maximize == "iso_vaf"
            vaf1 = quality_indices(1);
            vaf2 = quality_indices(2);
            vmi = regularise_vaf(quality_indices(1));
            vma = regularise_vaf(quality_indices(2));
            vaf1d = norm([vmi, vma]);
            vaf1dist = abs(quality_indices(2) - quality_indices(1))/sqrt(2);
            det_qual = vaf1d/(vaf1dist + 1);
            
        end
        %Passive limit - Universal joints
        if p_lim_uni(1) == 0 || p_lim_uni(2) == 0
            %If any instance(alpha,beta) does not satisfy passive limits of
            %the universal joint then skip that iteration and evaluate the quality as '0'
            continue;
        end
        
        %Passive limit - Spherical joints
        if p_lim_sph1(1) == 0 || p_lim_sph1(2) == 0 || p_lim_sph2(1) == 0 || p_lim_sph2(2) == 0
            %If any instance(alpha,beta) does not satisfy passive limits of
            %the spherical joint then skip that iteration and evaluate the quality as '0'
            continue;
        end
        
        if reward == "binary"
            joint_reward = 1;
        elseif reward == "linear"
            joint_reward = (p_lim_uni(1) + p_lim_uni(2))* (1/sind(limits(1))) + (p_lim_sph1(1) + p_lim_sph2(1))* (1/sind(limits(2))) + (p_lim_sph1(2) + p_lim_sph2(2))* (1/sind(limits(2)));
        elseif reward == "quadratic"
            joint_reward = ((p_lim_uni(1))^2 + (p_lim_uni(2))^2) * (1/sind(limits(1))) + (p_lim_sph1(1) + p_lim_sph2(1))^2 * (1/sind(limits(2))) + (p_lim_sph1(2) + p_lim_sph2(2))^2 * (1/sind(limits(2)));
        end
        
        if maximize == "joint_quality"
            loop_reward = joint_reward;
        elseif maximize == "conditioning_number" || maximize == "inner_conditioning" || maximize == "bias_conditioning" || maximize == "iso_vaf"
            loop_reward = det_qual;
        else
            loop_reward = 1;
        end
        
        valid_points_vec(valid_iter,1:5) = [alpha, beta, rho_inst, loop_reward];
        valid_iter = valid_iter + 1;
        c_qual_only_joint = c_qual_only_joint + loop_reward;
    end
end

stroke = limits(3); %This is the ratio of min and max actuator lengths and not the stroke length itself
total_rho = [rho1_range,rho2_range];
if max(total_rho) > stroke*min(total_rho) && skip ~= 1
    %Maximizing the valid points by applying the actuator limits
    j = 1;
    stroke_step = 3;
    xmin_step = ((max(total_rho)/stroke) - min(total_rho))/stroke_step;
    
    for x_min = min(total_rho):xmin_step:max(total_rho)/stroke
        c_qual_temp = 0; %initializing the value to calculate cumulative quality
        total_valid_points = 0; %initializing the value to calculate total number of valid points
        for i = 1:size(valid_points_vec, 1)
            rho1 = valid_points_vec(i, 3);
            rho2 = valid_points_vec(i, 4);
            if rho1 < x_min || rho1 > stroke*x_min
                %If any instance(alpha,beta) does not satisfy actuator length,
                %then skip that iteration and evaluate the quality as '0'
                continue;
            elseif rho2 < x_min || rho2 > stroke*x_min
                %If any instance(alpha,beta) does not satisfy actuator length,
                %then skip that iteration and evaluate the quality as '0'
                continue;
            end
            c_qual_temp = c_qual_temp + valid_points_vec(i, 5);
            total_valid_points = total_valid_points + 1;
        end
        c_qual_mat(j,1:3) = [c_qual_temp, x_min total_valid_points];
        j = j+1;
    end
    
    [c_qual,act_index] = max(c_qual_mat(:,1));
    [c_qual2,act_index2] = max(c_qual_mat(:,3));
    if c_qual_mat(act_index2, 3) - c_qual_mat(act_index, 3) > 1000
        c_qual = -c_qual2;
        rho_vec_min = c_qual_mat(act_index2,2);
        fprintf("Given priority to quantity over quality\n");
    else
        c_qual = -c_qual;
        rho_vec_min = c_qual_mat(act_index,2);
    end
    
    rho_vec = [rho_vec_min, rho_vec_min*stroke];
else
    if skip == 1
        c_qual = invalid_points;
    else
        c_qual = -c_qual_only_joint;
    end
    rho_vect = [rho1_range,rho2_range];
    rho_vec = [min(rho_vect), max(rho_vect)];
end
end
